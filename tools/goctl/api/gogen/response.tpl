// Code generated by ginctl. DO NOT EDIT.
package response

import (
    "errors"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
)

// 错误分为以下几类
// - 成功
// - 不规范错误
// - 规范错误
// - 未使用的错误

const (
	ErrOk = iota + 0
)

const (
	ErrUnspecified = -1 // 不规范错误，未分类的错误
)

const (
	ErrInvalidToken = iota + 100
	ErrInvalidParam
	ErrNoPermission
    ErrNeedVip
    ErrNeedQuota
)
const (
	ErrInternalError = iota + 500
)

// 此类型代表是规范错误
type GyError struct {
	Code int64  `json:"code"`
	Msg  string `json:"msg"`
}

func (e GyError) Error() string {
	return e.Msg
}

// 使用默认message
func NewGyError(code int64) GyError {
	return GyError{
		Code: code,
		Msg:  defaultMessage(code),
	}
}

// 指定message
func NewGyErrorReplaceMsg(code int64, message string) GyError {
	return GyError{
		Code: code,
		Msg:  message,
	}
}

// 追加message
func NewGyErrorAppendMsg(code int64, message string) GyError {
	return GyError{
		Code: code,
		Msg:  fmt.Sprintf("%s >> %s", defaultMessage(code), message),
	}
}

// 默认的->错误码说明信息
func defaultMessage(code int64) string {
	var msg string
	switch code {
	case ErrOk:
		msg = "success"
	case ErrUnspecified:
		msg = "[error]"
	case ErrInvalidToken:
		msg = "token不合法"
	case ErrInvalidParam:
		msg = "参数不合法"
	case ErrNoPermission:
		msg = "无权限"
	case ErrInternalError:
		msg = "内部错误"
	default:
		msg = "未使用"
	}
	return msg
}

type Body struct {
	Code int64  `json:"code"`
	Msg  string `json:"msg"`
	Data any    `json:"data"`
}


// Response
// 如果没有错误，err传空
// 如果有错误：err非空
// - 非规范错误：未指定错误码
// - 规范错误：根据错误类型，指定错误码
func Response(c *gin.Context, resp any, err error) {
	gyError := formatError(err)
	body := Body{
		Code: gyError.Code,
		Msg:  gyError.Msg,
		Data: resp,
	}
	c.JSON(http.StatusOK, body)
}

// 规范error
func formatError(err error) (gyError GyError) {
	if err == nil {
		// 1. [没有错误]
		gyError = NewGyError(ErrOk)
	} else {
		var target GyError
		if !errors.As(err, &target) {
			// 2.1 [不规范错误]
			gyError = NewGyErrorAppendMsg(ErrUnspecified, err.Error())
		} else {
			// 2.2 [规范错误]
			gyError = target
		}
	}
	return
}

// 请求不合法
func ResponseInvalid(c *gin.Context, httpCode int, err error) {
	c.String(httpCode, formatError(err).Error())
}
